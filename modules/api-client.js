// ========================================
// üìÅ modules/api-client.js
// ========================================
// –†–∞–±–æ—Ç–∞ —Å —Å–µ—Ä–≤–µ—Ä–æ–º –∏ API –∑–∞–ø—Ä–æ—Å–∞–º–∏

export class APIClient {
    constructor(widget) {
        this.widget = widget;
        this.apiUrl = widget.apiUrl;
        this.fieldName = widget.fieldName;
        this.responseField = widget.responseField;
    }

    // üÜï –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Å—Å–∏–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞
    async loadSessionInfo() {
        try {
            const sessionUrl = this.apiUrl.replace('/upload', `/session/${this.widget.sessionId}`);
            const response = await fetch(sessionUrl);
            if (response.ok) {
                const data = await response.json();
                if (data.insights) {
                    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –≤ –Ω–æ–≤—ã–π, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
                    const migratedInsights = this.widget.understanding.migrateInsights(data.insights);
                    this.widget.understanding.update(migratedInsights);
                    console.log('üì• –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏:', data);
                }
            }
        } catch (error) {
            console.log('‚ÑπÔ∏è –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è –∏–ª–∏ CORS –æ—à–∏–±–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
        }
    }

    async sendTextMessage() {
        const textInput = this.widget.shadowRoot.getElementById('textInput');
        const sendTextButton = this.widget.shadowRoot.getElementById('sendTextButton');
        const messageText = textInput.value.trim();
        
        if (!messageText) return;

        textInput.value = '';
        // üî• –û–ë–ù–û–í–õ–ï–ù–û: –í–º–µ—Å—Ç–æ —Å–∫—Ä—ã—Ç–∏—è - –¥–µ–ª–∞–µ–º disabled
        sendTextButton.disabled = true;
        sendTextButton.style.opacity = '0.5';
        sendTextButton.style.cursor = 'not-allowed';

        this.widget.ui.showLoading();

        const userMessage = {
            type: 'user',
            content: messageText,
            timestamp: new Date()
        };
        
        this.widget.ui.addMessage(userMessage);

        try {
            const formData = new FormData();
            formData.append('text', messageText);
            formData.append('sessionId', this.widget.sessionId);

            console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å sessionId:', this.widget.sessionId);

            const response = await fetch(this.apiUrl, {
                method: 'POST',
                body: formData
            });

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const data = await response.json();
            
            console.log('üì• –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ —Ç–µ–∫—Å—Ç:', {
                sessionId: data.sessionId,
                messageCount: data.messageCount,
                insights: data.insights,
                tokens: data.tokens,
                timing: data.timing
            });
            
            this.widget.ui.hideLoading();
            this.widget.ui.updateMessageCount();

            // üÜï –û–±–Ω–æ–≤–ª—è–µ–º insights –∏–∑ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞
            if (data.insights) {
                this.widget.understanding.update(data.insights);
            }

            const assistantMessage = {
                type: 'assistant',
                content: data[this.responseField] || '–û—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞.',
                timestamp: new Date()
            };
            this.widget.ui.addMessage(assistantMessage);

        } catch (error) {
            this.widget.ui.hideLoading();
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ–∫—Å—Ç–∞:', error);
            
            const assistantMessage = {
                type: 'assistant',
                content: error.message.includes('CORS') || error.message.includes('502') 
                    ? 'CORS –æ—à–∏–±–∫–∞: –ë—ç–∫–µ–Ω–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω —Å localhost. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ –∏–ª–∏ —Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Å —Ç–æ–≥–æ –∂–µ –¥–æ–º–µ–Ω–∞.'
                    : '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
                timestamp: new Date()
            };
            this.widget.ui.addMessage(assistantMessage);
        }

        this.widget.dispatchEvent(new CustomEvent('textMessageSend', {
            detail: { text: messageText }
        }));
    }

    async sendMessage() {
        if (!this.widget.audioRecorder.audioBlob) {
        console.error('–ù–µ—Ç –∞—É–¥–∏–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏');
        return;
        }

        if (this.widget.audioRecorder.recordingTime < this.widget.audioRecorder.minRecordingTime) {
        this.widget.ui.showNotification('‚ö†Ô∏è –ó–∞–ø–∏—Å—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è');
        return;
    }

        this.widget.ui.showLoading();

         const userMessage = {
        type: 'user',
        content: `–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (${this.widget.audioRecorder.recordingTime}—Å)`, // ‚Üê –¢–æ–∂–µ –∏—Å–ø—Ä–∞–≤–∏—Ç—å
        timestamp: new Date()
             };
    
         this.widget.ui.addMessage(userMessage);

         try {
           const formData = new FormData();
            formData.append(this.fieldName, this.widget.audioRecorder.audioBlob, 'voice-message.webm'); // ‚Üê –ò –∑–¥–µ—Å—å
            formData.append('sessionId', this.widget.sessionId);

            console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ —Å sessionId:', this.widget.sessionId);

            const response = await fetch(this.apiUrl, {
                method: 'POST',
                body: formData
            });

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const data = await response.json();
            
            console.log('üì• –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –∞—É–¥–∏–æ:', {
                sessionId: data.sessionId,
                messageCount: data.messageCount,
                insights: data.insights,
                tokens: data.tokens,
                timing: data.timing
            });
            
            this.widget.ui.hideLoading();
            this.widget.ui.updateMessageCount();

            // üÜï –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
            if (data.transcription) {
                const lastUserMessage = this.widget.messages[this.widget.messages.length - 1];
                if (lastUserMessage && lastUserMessage.type === 'user') {
                    lastUserMessage.content = data.transcription;
                    
                    const userMessages = this.widget.shadowRoot.querySelectorAll('.message.user');
                    const lastUserMessageElement = userMessages[userMessages.length - 1];
                    if (lastUserMessageElement) {
                        const bubble = lastUserMessageElement.querySelector('.message-bubble');
                        if (bubble) {
                            bubble.textContent = data.transcription;
                        }
                    }
                }
            }

            // üÜï –û–±–Ω–æ–≤–ª—è–µ–º insights –∏–∑ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞
            if (data.insights) {
                this.widget.understanding.update(data.insights);
            }

            const assistantMessage = {
                type: 'assistant',
                content: data[this.responseField] || '–û—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞.',
                timestamp: new Date()
            };
            this.widget.ui.addMessage(assistantMessage);

            this.widget.cleanupAfterSend();

        } catch (error) {
            this.widget.ui.hideLoading();
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞—É–¥–∏–æ:', error);
            
            const assistantMessage = {
                type: 'assistant',
                content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
                timestamp: new Date()
            };
            this.widget.ui.addMessage(assistantMessage);
        }

        this.widget.dispatchEvent(new CustomEvent('messageSend', {
            detail: { duration: this.widget.recordingTime }
        }));
    }
}