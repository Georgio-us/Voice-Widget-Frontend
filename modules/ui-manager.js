// ========================================
// üìÅ modules/ui-manager.js (–§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø –î–õ–Ø –û–î–ù–û–ì–û –ê–î–ê–ü–¢–ò–í–ù–û–ì–û –≠–õ–ï–ú–ï–ù–¢–ê)
// ========================================
// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º —Å –µ–¥–∏–Ω—ã–º –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—ã–º input —ç–ª–µ–º–µ–Ω—Ç–æ–º

export class UIManager {
    constructor(widget) {
        this.widget = widget;
        this.shadowRoot = widget.shadowRoot;
        
        // üî• STATE MACHINE –¥–ª—è –µ–¥–∏–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        this.inputState = 'idle'; // idle, typing, recording, recorded
        this.recordingTime = 0;
        this.recordingTimer = null;
        
        // –≠–ª–µ–º–µ–Ω—Ç—ã –µ–¥–∏–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        this.elements = {};
        
        // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º
        this.bindToInternalEvents();
    }

    // üî• –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø UI
    initializeUI() {
        // –ö—ç—à–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
        this.cacheElements();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.setState('idle');
        
        // –°–∫—Ä—ã–≤–∞–µ–º —Å–∫—Ä–æ–ª–ª–±–∞—Ä –≤ –ø—É—Å—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        const messagesContainer = this.shadowRoot.getElementById('messagesContainer');
        if (messagesContainer) {
            messagesContainer.style.overflowY = 'hidden';
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ª–æ–≥–∞
        this.widget.dialogStarted = false;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–Ω–∏–º–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
        if (this.widget.understanding) {
            this.widget.understanding.updateUnderstandingDisplay();
        }
    }

    // ‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –ö–≠–®–ò–†–û–í–ê–ù–ò–ï –≠–õ–ï–ú–ï–ù–¢–û–í –î–õ–Ø –ù–û–í–û–ô –°–¢–†–£–ö–¢–£–†–´
    cacheElements() {
        this.elements = {
            // ‚úÖ –ù–û–í–´–ô: –ï–¥–∏–Ω—ã–π –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
            adaptiveInputField: this.shadowRoot.getElementById('adaptiveInputField'),
            
            // ‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: textInput —Ç–µ–ø–µ—Ä—å –≤–Ω—É—Ç—Ä–∏ adaptiveInputField
            textInput: this.shadowRoot.getElementById('textInput'),
            
            // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
            unifiedContainer: this.shadowRoot.getElementById('unifiedInputContainer'),
            
            // –ö–Ω–æ–ø–∫–∏
            micButton: this.shadowRoot.getElementById('micButton'),
            cancelButton: this.shadowRoot.getElementById('cancelButton'),
            sendButton: this.shadowRoot.getElementById('sendButton'),
            
            // –°—Ç–∞—Ä—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
            mainButton: this.shadowRoot.getElementById('mainButton'),
            messagesContainer: this.shadowRoot.getElementById('messagesContainer'),
            emptyState: this.shadowRoot.getElementById('emptyState')
        };
    }

    // üî• –ü–†–ò–í–Ø–ó–ö–ê –ö –í–ù–£–¢–†–ï–ù–ù–ò–ú –°–û–ë–´–¢–ò–Ø–ú
    bindToInternalEvents() {
        // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –æ—Ç –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
        this.widget.events.on('recordingStarted', () => {
            this.setState('recording');
        });

        this.widget.events.on('recordingStopped', () => {
            this.setState('idle');
        });

        this.widget.events.on('recordingCancelled', () => {
            this.setState('idle');
        });

        this.widget.events.on('timerUpdated', (time) => {
            this.updateRecordingTimer(time);
        });

        this.widget.events.on('showNotification', (message) => {
            this.showNotification(message);
        });

        // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞
        this.widget.events.on('textMessageSent', () => {
            // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—á–∏—â–∞–µ–º –ø–æ–ª–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ idle
            const { textInput } = this.elements;
            if (textInput) {
                textInput.value = '';
            }
            this.setState('idle');
        });
    }

    // üî• STATE MACHINE - –ì–õ–ê–í–ù–´–ô –ú–ï–¢–û–î
    setState(newState, data = {}) {
        console.log(`üéØ UI State: ${this.inputState} ‚Üí ${newState}`);
        
        const oldState = this.inputState;
        this.inputState = newState;
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥
        this.executeStateTransition(oldState, newState, data);
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏–µ –º–æ–¥—É–ª–∏
        this.widget.events.emit('uiStateChanged', { 
            from: oldState, 
            to: newState, 
            data 
        });
    }

    // üî• –í–´–ü–û–õ–ù–ï–ù–ò–ï –ü–ï–†–ï–•–û–î–ê –°–û–°–¢–û–Ø–ù–ò–ô
    executeStateTransition(from, to, data) {
        // –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.clearState(from);
        
        // –ó–∞—Ç–µ–º –ø—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.applyState(to, data);
    }

    // ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ê: –û–ß–ò–°–¢–ö–ê –°–û–°–¢–û–Ø–ù–ò–Ø
    clearState(state) {
        const { adaptiveInputField, micButton, cancelButton, sendButton, unifiedContainer } = this.elements;
        
        switch (state) {
            case 'idle':
                // –ù–∏—á–µ–≥–æ –æ—Å–æ–±–µ–Ω–Ω–æ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
                break;
                
            case 'typing':
                // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞
                const textInput = adaptiveInputField?.querySelector('input');
                if (!textInput?.value?.trim()) {
                    sendButton?.classList.remove('active');
                }
                break;
                
            case 'recording':
                // ‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –æ–±—Ä–∞—Ç–Ω–æ
                if (micButton) {
                    micButton.classList.remove('recording', 'hidden');
                }
                
                // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –£–±–∏—Ä–∞–µ–º –æ—Ä–∞–Ω–∂–µ–≤—É—é —Ä–∞–º–∫—É
                if (unifiedContainer) {
                    unifiedContainer.classList.remove('recording-active');
                }
                
                // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä
                if (this.recordingTimer) {
                    clearInterval(this.recordingTimer);
                    this.recordingTimer = null;
                }
                break;
                
            case 'recorded':
                // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–ø–∏—Å–∏
                this.clearRecordingState();
                break;
        }
    }

    // üî• –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –°–û–°–¢–û–Ø–ù–ò–Ø
    applyState(state, data) {
        switch (state) {
            case 'idle':
                this.applyIdleState();
                break;
                
            case 'typing':
                this.applyTypingState();
                break;
                
            case 'recording':
                this.applyRecordingState();
                break;
                
            case 'recorded':
                this.applyRecordedState(data);
                break;
        }
    }

    // ‚úÖ –ü–û–õ–ù–û–°–¢–¨–Æ –ü–ï–†–ï–ü–ò–°–ê–ù–û: –°–û–°–¢–û–Ø–ù–ò–ï IDLE
    applyIdleState() {
        const { adaptiveInputField, micButton, cancelButton, sendButton } = this.elements;
        
        // ‚úÖ –ü–ï–†–ï–ö–õ–Æ–ß–ê–ï–ú –ù–ê –¢–ï–ö–°–¢–û–í–´–ô –†–ï–ñ–ò–ú
        if (adaptiveInputField) {
            adaptiveInputField.className = 'adaptive-input-field text-mode';
            
            // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            let textInput = adaptiveInputField.querySelector('input');
            if (!textInput) {
                adaptiveInputField.innerHTML = '<input type="text" id="textInput" placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å...">';
                textInput = adaptiveInputField.querySelector('input');
                
                // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è –Ω–æ–≤–æ–≥–æ input
                this.bindTextInputEvents(textInput);
            }
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
            if (textInput) {
                textInput.placeholder = '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å...';
                textInput.disabled = false;
                textInput.style.opacity = '1';
            }
        }
        
        // ‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –ö–Ω–æ–ø–∫–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
        if (micButton) {
            micButton.style.display = 'flex';
            micButton.classList.remove('recording', 'hidden');
            
            // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ª–æ–≥–∞
            if (this.widget.dialogStarted) {
                micButton.disabled = false;
                micButton.classList.add('active');
            } else {
                micButton.disabled = true;
                micButton.classList.remove('active');
            }
        }
        
        // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
        if (cancelButton) {
            cancelButton.classList.remove('active');
        }
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
        if (sendButton) {
            const textInput = adaptiveInputField?.querySelector('input');
            const hasText = textInput?.value?.trim();
            sendButton.classList.toggle('active', Boolean(hasText));
            sendButton.disabled = !hasText;
        }
    }

    // ‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –°–û–°–¢–û–Ø–ù–ò–ï TYPING
    applyTypingState() {
        const { adaptiveInputField, sendButton, micButton } = this.elements;
        
        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç
        const textInput = adaptiveInputField?.querySelector('input');
        const hasText = textInput?.value?.trim();
        if (sendButton) {
            sendButton.classList.toggle('active', Boolean(hasText));
            sendButton.disabled = !hasText;
        }

        // ‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –∫–Ω–æ–ø–∫–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        if (micButton) {
            micButton.classList.remove('hidden');
            
            // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
            if (this.widget.dialogStarted) {
                micButton.classList.add('active');
                micButton.disabled = false;
            } else {
                micButton.classList.remove('active');
                micButton.disabled = true;
            }
        }
    }

    // ‚úÖ –ü–û–õ–ù–û–°–¢–¨–Æ –ü–ï–†–ï–ü–ò–°–ê–ù–û: –°–û–°–¢–û–Ø–ù–ò–ï RECORDING
    applyRecordingState() {
        const { adaptiveInputField, micButton, cancelButton, sendButton, unifiedContainer } = this.elements;
        
        // ‚úÖ –ü–ï–†–ï–ö–õ–Æ–ß–ê–ï–ú –ù–ê –†–ï–ñ–ò–ú –ó–ê–ü–ò–°–ò
        if (adaptiveInputField) {
            adaptiveInputField.className = 'adaptive-input-field recording-mode';
            
            // –ó–∞–º–µ–Ω—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–ø–∏—Å–∏
            adaptiveInputField.innerHTML = `
                <div class="recording-timer" id="recordingTimer">0:00</div>
                <div class="recording-waves">
                    <div class="wave-bar"></div>
                    <div class="wave-bar"></div>
                    <div class="wave-bar"></div>
                    <div class="wave-bar"></div>
                </div>
                <div class="recording-text">–ò–¥–µ—Ç –∑–∞–ø–∏—Å—å...</div>
            `;
        }
        
        // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –û—Ä–∞–Ω–∂–µ–≤–∞—è —Ä–∞–º–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        if (unifiedContainer) {
            unifiedContainer.classList.add('recording-active');
        }
        
        // ‚úÖ –ì–õ–ê–í–ù–û–ï: –°–ö–†–´–í–ê–ï–ú –∫–Ω–æ–ø–∫—É –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –≤–æ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏
        if (micButton) {
            micButton.classList.add('hidden');
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
        if (cancelButton) {
            cancelButton.classList.add('active');
        }
        
        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
        if (sendButton) {
            sendButton.classList.add('active');
            sendButton.disabled = false;
        }
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
        this.recordingTime = 0;
        this.startRecordingTimer();
        
        console.log('üéôÔ∏è Recording state applied - field switched to recording mode');
    }

    // ‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –°–û–°–¢–û–Ø–ù–ò–ï RECORDED
    applyRecordedState(data) {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ idle —Å–æ—Å—Ç–æ—è–Ω–∏—é
        this.applyIdleState();
        
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –¥–ª—è recorded —Å–æ—Å—Ç–æ—è–Ω–∏—è
        console.log('üìº Recording finished, switched back to text mode');
    }

    // ‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô –í–í–û–î–ê
    handleTextInput() {
        const { adaptiveInputField } = this.elements;
        const textInput = adaptiveInputField?.querySelector('input');
        const hasText = textInput?.value?.trim();
        
        if (hasText && this.inputState === 'idle') {
            this.setState('typing');
        } else if (!hasText && this.inputState === 'typing') {
            this.setState('idle');
        } else if (this.inputState === 'typing') {
            // –ü—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
            this.applyTypingState();
        }
    }

    handleTextKeyDown(e) {
        if (e.key === 'Enter' && !e.shiftKey && !this.isMobile()) {
            e.preventDefault();
            const { adaptiveInputField } = this.elements;
            const textInput = adaptiveInputField?.querySelector('input');
            if (this.inputState === 'typing' && textInput?.value?.trim()) {
                this.handleSendText();
            }
        }
    }

    // üî• –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö
    handleMicClick() {
        console.log('üé§ Mic button clicked, current state:', this.inputState);
        
        if (this.inputState === 'idle' || this.inputState === 'typing') {
            // –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–∏—Å—å
            this.widget.audioRecorder.startRecording();
        }
    }

    handleCancelClick() {
        console.log('‚ùå Cancel button clicked, current state:', this.inputState);
        
        if (this.inputState === 'recording') {
            // –û—Ç–º–µ–Ω—è–µ–º –∑–∞–ø–∏—Å—å
            this.widget.audioRecorder.cancelRecording();
        }
    }

    handleSendClick() {
        console.log('‚û§ Send button clicked, current state:', this.inputState);
        
        if (this.inputState === 'typing') {
            this.handleSendText();
        } else if (this.inputState === 'recording') {
            this.widget.audioRecorder.finishAndSend();
        } else if (this.inputState === 'recorded') {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∞–Ω–Ω–æ–µ –∞—É–¥–∏–æ
            this.widget.api.sendMessage();
        }
    }

    // ‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –û–¢–ü–†–ê–í–ö–ê –¢–ï–ö–°–¢–ê
    handleSendText() {
        const { adaptiveInputField } = this.elements;
        const textInput = adaptiveInputField?.querySelector('input');
        const text = textInput?.value?.trim();
        
        if (text) {
            // ‚úÖ –ù–ï –û–ß–ò–©–ê–ï–ú –ü–û–õ–ï –ó–î–ï–°–¨ - —ç—Ç–æ —Å–¥–µ–ª–∞–µ—Ç API –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ API –º–æ–¥—É–ª—å
            this.widget.api.sendTextMessage();
        }
    }

    // ‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –¢–ê–ô–ú–ï–† –ó–ê–ü–ò–°–ò
    startRecordingTimer() {
        this.recordingTime = 0;
        this.recordingTimer = setInterval(() => {
            this.recordingTime++;
            this.updateRecordingTimer(this.recordingTime);
        }, 1000);
    }

    updateRecordingTimer(time) {
        const { adaptiveInputField } = this.elements;
        const recordingTimer = adaptiveInputField?.querySelector('#recordingTimer');
        if (recordingTimer) {
            const minutes = Math.floor(time / 60);
            const seconds = time % 60;
            recordingTimer.textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;
        }
    }

    clearRecordingState() {
        if (this.recordingTimer) {
            clearInterval(this.recordingTimer);
            this.recordingTimer = null;
        }
        this.recordingTime = 0;
    }

    // ‚úÖ –ù–û–í–´–ô: –ü–†–ò–í–Ø–ó–ö–ê –°–û–ë–´–¢–ò–ô –ö –¢–ï–ö–°–¢–û–í–û–ú–£ –ü–û–õ–Æ
    bindTextInputEvents(textInput) {
        if (textInput) {
            textInput.addEventListener('input', () => this.handleTextInput());
            textInput.addEventListener('keydown', (e) => this.handleTextKeyDown(e));
        }
    }

    // ‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –ü–†–ò–í–Ø–ó–ö–ê –°–û–ë–´–¢–ò–ô –ö –ù–û–í–´–ú –≠–õ–ï–ú–ï–ù–¢–ê–ú
    bindUnifiedInputEvents() {
        const { micButton, cancelButton, sendButton, mainButton, adaptiveInputField } = this.elements;
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è (–¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è)
        const initialTextInput = adaptiveInputField?.querySelector('input');
        this.bindTextInputEvents(initialTextInput);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
        micButton?.addEventListener('click', () => this.handleMicClick());
        cancelButton?.addEventListener('click', () => this.handleCancelClick());
        sendButton?.addEventListener('click', () => this.handleSendClick());
        
        // –°—Ç–∞—Ä–∞—è –≥–ª–∞–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        mainButton?.addEventListener('click', () => {
            if (!this.widget.audioRecorder?.isRecording && !mainButton.disabled) {
                this.handleMicClick();
            }
        });
        
        console.log('üîó Unified input events bound successfully');
    }

    // ‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –ê–ö–¢–ò–í–ê–¶–ò–Ø –ö–ù–û–ü–û–ö –ü–û–°–õ–ï –ù–ê–ß–ê–õ–ê –î–ò–ê–õ–û–ì–ê
    activateDialogButtons() {
        const { micButton } = this.elements;
        
        if (micButton) {
            micButton.disabled = false;
            micButton.classList.add('active'); // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ
            
            console.log('‚úÖ Dialog buttons activated - –º–∞–ª–µ–Ω—å–∫–∞—è –∫–Ω–æ–ø–∫–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞');
            this.widget.dialogStarted = true;
        }
    }

    // üî• –°–û–û–ë–©–ï–ù–ò–Ø (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã)
    addMessage(message) {
        this.widget.messages.push(message);
        const messagesContainer = this.elements.messagesContainer;
        const emptyState = this.elements.emptyState;
        
        // –°–∫—Ä—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        if (this.widget.messages.length === 1) {
            if (emptyState) {
                emptyState.style.display = 'none';
                messagesContainer.style.overflowY = 'auto';
            }
            this.activateDialogButtons();
        }

        const messageElement = this.createMessageElement(message);
        messagesContainer.appendChild(messageElement);
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
        
        this.updateMessageCount();
    }

    createMessageElement(message) {
        const messageElement = document.createElement('div');
        messageElement.className = `message ${message.type}`;
        
        const bubbleElement = document.createElement('div');
        bubbleElement.className = 'message-bubble';

        if (message.type === 'assistant') {
            bubbleElement.classList.add('chat-response');
            bubbleElement.innerHTML = marked.parse(message.content);
        } else {
            bubbleElement.textContent = message.content;
        }

        messageElement.appendChild(bubbleElement);
        return messageElement;
    }

    // üî• –£–¢–ò–õ–ò–¢–ê–†–ù–´–ï –ú–ï–¢–û–î–´
    updateMessageCount() {
        const messageCountElement = this.shadowRoot.getElementById('messageCount');
        if (messageCountElement) {
            messageCountElement.textContent = this.widget.messages.length;
        }
    }

    showLoading() {
        const loadingIndicator = this.shadowRoot.getElementById('loadingIndicator');
        if (loadingIndicator) {
            loadingIndicator.classList.add('active');
        }
    }

    hideLoading() {
        const loadingIndicator = this.shadowRoot.getElementById('loadingIndicator');
        if (loadingIndicator) {
            loadingIndicator.classList.remove('active');
        }
    }

    showNotification(message) {
        console.log('üì¢', message);
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å toast notifications
    }

    showWarning(message) {
        console.log('‚ö†Ô∏è', message);
    }

    isMobile() {
        return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) 
               || 'ontouchstart' in window;
    }

    // üî• –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–´–ï –ö–ù–û–ü–ö–ò (–æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    bindFunctionButtons() {
        const imageBtn = this.shadowRoot.getElementById('imageBtn');
        const documentBtn = this.shadowRoot.getElementById('documentBtn');
        const pdfBtn = this.shadowRoot.getElementById('pdfBtn');

        const mobileImgBtn = this.shadowRoot.getElementById('mobileImgBtn');
        const mobileDocBtn = this.shadowRoot.getElementById('mobileDocBtn');
        const mobilePdfBtn = this.shadowRoot.getElementById('mobilePdfBtn');

        [imageBtn, mobileImgBtn].forEach(btn => {
            if (btn) {
                btn.addEventListener('click', () => {
                    console.log('üñºÔ∏è –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
                    this.showNotification('üñºÔ∏è –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
                });
            }
        });

        [documentBtn, mobileDocBtn].forEach(btn => {
            if (btn) {
                btn.addEventListener('click', () => {
                    console.log('üìÑ –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
                    this.showNotification('üìÑ –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
                });
            }
        });

        [pdfBtn, mobilePdfBtn].forEach(btn => {
            if (btn) {
                btn.addEventListener('click', () => {
                    console.log('üìä –§—É–Ω–∫—Ü–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è PDF –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
                    this.showNotification('üìä –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
                });
            }
        });
    }

    // üî• –ê–ö–ö–û–†–î–ï–û–ù (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    bindAccordionEvents() {
        const detailsAccordionHeader = this.shadowRoot.querySelector('[data-accordion="details-preferences"]');
        
        if (detailsAccordionHeader) {
            detailsAccordionHeader.addEventListener('click', () => {
                this.toggleDetailsAccordion();
            });
            console.log('üìÇ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∞–∫–∫–æ—Ä–¥–µ–æ–Ω –¥–ª—è "–î–µ—Ç–∞–ª–∏ –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è"');
        }
    }

    toggleDetailsAccordion() {
        const accordionBlock = this.shadowRoot.querySelector('[data-accordion="details-preferences"]')?.closest('.accordion-block');
        
        if (!accordionBlock) {
            console.warn('üîç –ë–ª–æ–∫ "–î–µ—Ç–∞–ª–∏ –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è" –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        if (accordionBlock.classList.contains('open')) {
            accordionBlock.classList.remove('open');
            console.log('üìÅ –ó–∞–∫—Ä—ã–ª "–î–µ—Ç–∞–ª–∏ –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è"');
        } else {
            accordionBlock.classList.add('open');
            console.log('üìÇ –û—Ç–∫—Ä—ã–ª "–î–µ—Ç–∞–ª–∏ –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è"');
        }
    }

    openDetailsAccordion() {
        const accordionBlock = this.shadowRoot.querySelector('[data-accordion="details-preferences"]')?.closest('.accordion-block');
        if (accordionBlock) {
            accordionBlock.classList.add('open');
            console.log('üìÇ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–∫—Ä—ã–ª "–î–µ—Ç–∞–ª–∏ –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è"');
        }
    }

    closeDetailsAccordion() {
        const accordionBlock = this.shadowRoot.querySelector('[data-accordion="details-preferences"]')?.closest('.accordion-block');
        if (accordionBlock) {
            accordionBlock.classList.remove('open');
            console.log('üìÅ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–ª "–î–µ—Ç–∞–ª–∏ –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è"');
        }
    }

    // ‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –û–ß–ò–°–¢–ö–ê
    clearMessages() {
        this.widget.messages = [];
        const messagesContainer = this.elements.messagesContainer;
        const emptyState = this.elements.emptyState;
        
        if (messagesContainer && emptyState) {
            messagesContainer.innerHTML = '';
            const newEmptyState = emptyState.cloneNode(true);
            messagesContainer.appendChild(newEmptyState);
            newEmptyState.style.display = 'block';
            messagesContainer.style.overflowY = 'hidden';
        }
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
        this.widget.dialogStarted = false;
        this.setState('idle');
        
        this.updateMessageCount();
        
        // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è –Ω–æ–≤–æ–π –≥–ª–∞–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏
        const newMainButton = this.shadowRoot.getElementById('mainButton');
        if (newMainButton) {
            newMainButton.addEventListener('click', () => {
                if (!this.widget.audioRecorder?.isRecording && !newMainButton.disabled) {
                    this.handleMicClick();
                }
            });
        }
    }

    // üî• –ì–ï–¢–¢–ï–†–´ –°–û–°–¢–û–Ø–ù–ò–Ø
    getCurrentState() {
        return this.inputState;
    }

    isRecording() {
        return this.inputState === 'recording';
    }

    isTyping() {
        return this.inputState === 'typing';
    }

    isIdle() {
        return this.inputState === 'idle';
    }
}