// ========================================
// üìÅ modules/ui-manager.js
// ========================================
// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º –∏ –≤—Å–µ–º–∏ UI —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏

export class UIManager {
    constructor(widget) {
        this.widget = widget;
        this.shadowRoot = widget.shadowRoot;
    }

    initializeUI() {
        const recordingControls = this.shadowRoot.getElementById('recordingControls');
        recordingControls.style.display = 'none';
        
        // –°–∫—Ä—ã–≤–∞–µ–º —Å–∫—Ä–æ–ª–ª–±–∞—Ä –≤ –ø—É—Å—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        const messagesContainer = this.shadowRoot.getElementById('messagesContainer');
        messagesContainer.style.overflowY = 'hidden';
        
        // üÜï –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –∫–Ω–æ–ø–æ–∫ –¥–ª—è UX –ª–æ–≥–∏–∫–∏
        const voiceButton = this.shadowRoot.getElementById('voiceButton');
        const sendTextButton = this.shadowRoot.getElementById('sendTextButton');
        
        // Voice button –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ –¥–æ –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ª–æ–≥–∞ (–∞–∫—Ü–µ–Ω—Ç –Ω–∞ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π –∫–Ω–æ–ø–∫–µ)
        voiceButton.disabled = true;
        voiceButton.style.opacity = '0.5';
        voiceButton.style.cursor = 'not-allowed';
        
        // Send text button –≤—Å–µ–≥–¥–∞ –≤–∏–¥–∏–º–∞, –Ω–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ –¥–æ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
        sendTextButton.style.display = 'flex';
        sendTextButton.disabled = true;
        sendTextButton.style.opacity = '0.5';
        sendTextButton.style.cursor = 'not-allowed';
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ª–æ–≥–∞
        this.widget.dialogStarted = false;
        
        this.widget.understanding.updateUnderstandingDisplay();
    }

    // üÜï –ú–ï–¢–û–î –ê–ö–¢–ò–í–ê–¶–ò–ò –ö–ù–û–ü–û–ö –ü–û–°–õ–ï –ù–ê–ß–ê–õ–ê –î–ò–ê–õ–û–ì–ê
    activateDialogButtons() {
        const voiceButton = this.shadowRoot.getElementById('voiceButton');
        
        if (voiceButton && voiceButton.disabled) {
            voiceButton.disabled = false;
            voiceButton.style.opacity = '1';
            voiceButton.style.cursor = 'pointer';
            
            console.log('‚úÖ Voice button –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ - –¥–∏–∞–ª–æ–≥ –Ω–∞—á–∞—Ç');
            this.widget.dialogStarted = true;
        }
    }

    updateTimer(recordingTime) {
        const timer = this.shadowRoot.getElementById('timer');
        const minutes = Math.floor(recordingTime / 60);
        const seconds = recordingTime % 60;
        timer.textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;
    }

    updateMessageCount() {
        const messageCountElement = this.shadowRoot.getElementById('messageCount');
        messageCountElement.textContent = this.widget.messages.length;
    }

    showLoading() {
        const loadingIndicator = this.shadowRoot.getElementById('loadingIndicator');
        loadingIndicator.classList.add('active');
    }

    hideLoading() {
        const loadingIndicator = this.shadowRoot.getElementById('loadingIndicator');
        loadingIndicator.classList.remove('active');
    }

    showNotification(message) {
        console.log('üì¢', message);
    }

    // üî• –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î addMessage —Å –∞–∫—Ç–∏–≤–∞—Ü–∏–µ–π –∫–Ω–æ–ø–æ–∫
    addMessage(message) {
        this.widget.messages.push(message);
        const messagesContainer = this.shadowRoot.getElementById('messagesContainer');
        const emptyState = this.shadowRoot.getElementById('emptyState');
        
        // üÜï –°–∫—Ä—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
        if (this.widget.messages.length === 1) {
            if (emptyState) {
                emptyState.style.display = 'none';
                messagesContainer.style.overflowY = 'auto';
            }
            this.activateDialogButtons();
        }

        // –°–æ–∑–¥–∞—ë–º –æ–±—ë—Ä—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
        const messageElement = document.createElement('div');
        messageElement.className = `message ${message.type}`;
        
        // –°–æ–∑–¥–∞—ë–º "–ø—É–∑—ã—Ä—å"
        const bubbleElement = document.createElement('div');
        bubbleElement.className = 'message-bubble';

        // üí¨ –†–µ–Ω–¥–µ—Ä–∏–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ Markdown
        if (message.type === 'assistant') {
            bubbleElement.classList.add('chat-response');
            bubbleElement.innerHTML = marked.parse(message.content);
        } else {
            bubbleElement.textContent = message.content;
        }

        messageElement.appendChild(bubbleElement);
        messagesContainer.appendChild(messageElement);
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }

    typeWriter(element, text, speed = 30) {
        let i = 0;
        const messagesContainer = this.shadowRoot.getElementById('messagesContainer');
        
        const cursor = document.createElement('span');
        cursor.className = 'typing-cursor';
        cursor.textContent = '|';
        element.appendChild(cursor);
        
        const typeInterval = setInterval(() => {
            if (i < text.length) {
                element.insertBefore(document.createTextNode(text.charAt(i)), cursor);
                i++;
                messagesContainer.scrollTop = messagesContainer.scrollHeight;
            } else {
                cursor.remove();
                clearInterval(typeInterval);
                messagesContainer.scrollTop = messagesContainer.scrollHeight;
            }
        }, speed);
    }

    showWarning(message) {
        console.log('‚ö†Ô∏è', message);
    }

    isMobile() {
        return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) 
               || 'ontouchstart' in window;
    }

    bindFunctionButtons() {
        // Desktop —Ñ—É–Ω–∫—Ü–∏–∏ (–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –∫ input area)
        const imageBtn = this.shadowRoot.getElementById('imageBtn');
        const documentBtn = this.shadowRoot.getElementById('documentBtn');
        const pdfBtn = this.shadowRoot.getElementById('pdfBtn');

        // Mobile —Ñ—É–Ω–∫—Ü–∏–∏
        const mobileImgBtn = this.shadowRoot.getElementById('mobileImgBtn');
        const mobileDocBtn = this.shadowRoot.getElementById('mobileDocBtn');
        const mobilePdfBtn = this.shadowRoot.getElementById('mobilePdfBtn');

        [imageBtn, mobileImgBtn].forEach(btn => {
            if (btn) {
                btn.addEventListener('click', () => {
                    console.log('üñºÔ∏è –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
                    this.showNotification('üñºÔ∏è –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
                });
            }
        });

        [documentBtn, mobileDocBtn].forEach(btn => {
            if (btn) {
                btn.addEventListener('click', () => {
                    console.log('üìÑ –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
                    this.showNotification('üìÑ –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
                });
            }
        });

        [pdfBtn, mobilePdfBtn].forEach(btn => {
            if (btn) {
                btn.addEventListener('click', () => {
                    console.log('üìä –§—É–Ω–∫—Ü–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è PDF –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
                    this.showNotification('üìä –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
                });
            }
        });
    }

    // üî• –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ï ACCORDION –ú–ï–¢–û–î–´ (—Ç–æ–ª—å–∫–æ –¥–ª—è "–î–µ—Ç–∞–ª–∏ –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è")
    bindAccordionEvents() {
        // –ù–∞—Ö–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –∞–∫–∫–æ—Ä–¥–µ–æ–Ω –¥–ª—è "–î–µ—Ç–∞–ª–∏ –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è"
        const detailsAccordionHeader = this.shadowRoot.querySelector('[data-accordion="details-preferences"]');
        
        if (detailsAccordionHeader) {
            detailsAccordionHeader.addEventListener('click', () => {
                this.toggleDetailsAccordion();
            });
            console.log('üìÇ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∞–∫–∫–æ—Ä–¥–µ–æ–Ω –¥–ª—è "–î–µ—Ç–∞–ª–∏ –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è"');
        }
    }

    toggleDetailsAccordion() {
        const accordionBlock = this.shadowRoot.querySelector('[data-accordion="details-preferences"]')?.closest('.accordion-block');
        
        if (!accordionBlock) {
            console.warn('üîç –ë–ª–æ–∫ "–î–µ—Ç–∞–ª–∏ –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è" –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∫–ª–∞—Å—Å open
        if (accordionBlock.classList.contains('open')) {
            accordionBlock.classList.remove('open');
            console.log('üìÅ –ó–∞–∫—Ä—ã–ª "–î–µ—Ç–∞–ª–∏ –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è"');
        } else {
            accordionBlock.classList.add('open');
            console.log('üìÇ –û—Ç–∫—Ä—ã–ª "–î–µ—Ç–∞–ª–∏ –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è"');
        }
    }

    // üî• –£–ü–†–û–©–ï–ù–ù–´–ï –ü–£–ë–õ–ò–ß–ù–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ê–ö–ö–û–†–î–ï–û–ù–û–ú
    openDetailsAccordion() {
        const accordionBlock = this.shadowRoot.querySelector('[data-accordion="details-preferences"]')?.closest('.accordion-block');
        if (accordionBlock) {
            accordionBlock.classList.add('open');
            console.log('üìÇ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–∫—Ä—ã–ª "–î–µ—Ç–∞–ª–∏ –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è"');
        }
    }

    closeDetailsAccordion() {
        const accordionBlock = this.shadowRoot.querySelector('[data-accordion="details-preferences"]')?.closest('.accordion-block');
        if (accordionBlock) {
            accordionBlock.classList.remove('open');
            console.log('üìÅ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–ª "–î–µ—Ç–∞–ª–∏ –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è"');
        }
    }

    clearMessages() {
        this.widget.messages = [];
        const messagesContainer = this.shadowRoot.getElementById('messagesContainer');
        const emptyState = this.shadowRoot.getElementById('emptyState');
        
        messagesContainer.innerHTML = '';
        const newEmptyState = emptyState.cloneNode(true);
        messagesContainer.appendChild(newEmptyState);
        newEmptyState.style.display = 'block';
        
        messagesContainer.style.overflowY = 'hidden';
        
        // üÜï –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π
        this.widget.dialogStarted = false;
        const voiceButton = this.shadowRoot.getElementById('voiceButton');
        const sendTextButton = this.shadowRoot.getElementById('sendTextButton');
        
        if (voiceButton) {
            voiceButton.disabled = true;
            voiceButton.style.opacity = '0.5';
            voiceButton.style.cursor = 'not-allowed';
        }
        
        if (sendTextButton) {
            sendTextButton.disabled = true;
            sendTextButton.style.opacity = '0.5';
            sendTextButton.style.cursor = 'not-allowed';
        }
        
        this.updateMessageCount();
        
        const newMainButton = this.shadowRoot.getElementById('mainButton');
        newMainButton.addEventListener('click', () => {
            if (!this.widget.isRecording && !newMainButton.disabled) {
                this.widget.startRecording();
           }
       });
    }
}