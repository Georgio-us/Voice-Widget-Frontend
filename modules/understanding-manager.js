// ========================================
// üìÅ modules/understanding-manager.js
// ========================================
// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º –∑–∞–ø—Ä–æ—Å–∞ –∏ –∞–Ω–∞–ª–∏–∑–æ–º insights

export class UnderstandingManager {
  constructor(widget) {
    this.widget = widget;

    // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ–Ω–∏–º–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ (9 –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)
    this.understanding = {
      // –ë–ª–æ–∫ 1: –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (33.3%)
      name: null,        // 10%
      operation: null,   // 12%
      budget: null,      // 11%

      // –ë–ª–æ–∫ 2: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ (33.3%)
      type: null,        // 11%
      location: null,    // 11%
      rooms: null,       // 11%

      // –ë–ª–æ–∫ 3: –î–µ—Ç–∞–ª–∏ –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è (33.3%)
      area: null,        // 11%
      details: null,     // 11% (–¥–µ—Ç–∞–ª–∏ –ª–æ–∫–∞—Ü–∏–∏)
      preferences: null, // 11%

      progress: 0
    };
  }

  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è
  isFilled(v) {
    if (v === null || v === undefined) return false;
    if (typeof v === 'string') return v.trim().length > 0;
    // —á–∏—Å–ª–∞/–±—É–ª–µ–≤—ã/–æ–±—ä–µ–∫—Ç—ã/–º–∞—Å—Å–∏–≤—ã —Å—á–∏—Ç–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏, –µ—Å–ª–∏ –Ω–µ null/undefined
    return true;
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–Ω–∏–º–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
  update(insights) {
    if (!insights) return;

    console.log('üß† –û–±–Ω–æ–≤–ª—è—é –ø–æ–Ω–∏–º–∞–Ω–∏–µ:', insights);

    // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    this.understanding = { ...this.understanding, ...insights };

    // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    this.understanding.progress = this.calculateProgress();

    // –û–±–Ω–æ–≤–ª—è–µ–º UI
    this.updateUnderstandingDisplay();

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏–µ –º–æ–¥—É–ª–∏
    this.widget.events.emit('understandingUpdated', this.understanding);
  }

  // –ì–∏–±–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞—Å—á—ë—Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  calculateProgress() {
    const weights = {
      // –ë–ª–æ–∫ 1
      name: 10,
      operation: 12,
      budget: 11,
      // –ë–ª–æ–∫ 2
      type: 11,
      location: 11,
      rooms: 11,
      // –ë–ª–æ–∫ 3
      area: 11,
      details: 11,
      preferences: 11
    };

    let total = 0;
    for (const [field, w] of Object.entries(weights)) {
      if (this.isFilled(this.understanding[field])) total += w;
    }
    // –º–∞–∫—Å–∏–º—É–º 99%, —á—Ç–æ–±—ã –±—ã–ª–æ –º–µ—Å—Ç–æ –¥–ª—è —Ñ–∏–Ω–∏—à–Ω–æ–≥–æ —à–∞–≥–∞
    return Math.min(total, 99);
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–Ω–∏–º–∞–Ω–∏—è
  updateUnderstandingDisplay() {
    const progressFill = this.widget.shadowRoot.getElementById('progressFill');
    const progressText = this.widget.shadowRoot.getElementById('progressText');

    const progress = this.understanding.progress;

    if (progressFill) {
      progressFill.style.width = `${progress}%`;
    }
    if (progressText) {
      progressText.textContent = `${progress}% - ${this.getStageText(progress)}`;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –ø–æ–ª—è insights
    this.updateInsightItem('name', this.understanding.name);
    this.updateInsightItem('operation', this.understanding.operation);
    this.updateInsightItem('budget', this.understanding.budget);
    this.updateInsightItem('type', this.understanding.type);
    this.updateInsightItem('location', this.understanding.location);
    this.updateInsightItem('rooms', this.understanding.rooms);
    this.updateInsightItem('area', this.understanding.area);
    this.updateInsightItem('details', this.understanding.details);
    this.updateInsightItem('preferences', this.understanding.preferences);
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—è insights (–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–ø—Ü–∏–æ–Ω–∞–ª–µ–Ω)
  updateInsightItem(field, value) {
    const indicator = this.widget.shadowRoot.getElementById(`${field}Indicator`); // –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å
    const valueElement = this.widget.shadowRoot.getElementById(`${field}Value`);

    if (!indicator && !valueElement) {
      // –í —Ç–µ–∫—É—â–µ–π —Ä–∞–∑–º–µ—Ç–∫–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –Ω–µ—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º —Ç–∏—Ö–æ
      return;
    }

    const filled = this.isFilled(value);

    if (valueElement) {
      valueElement.textContent = filled ? String(value) : this.getDefaultText(field);
    }
    if (indicator) {
      indicator.classList.toggle('filled', filled);
    }
  }

  // –¢–µ–∫—Å—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ø–æ–ª—è
  getDefaultText(field) {
    const defaults = {
      name: '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ',
      operation: '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞',
      budget: '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω',
      type: '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω',
      location: '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω',
      details: '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã',
      rooms: '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ',
      area: '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞',
      preferences: '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã'
    };
    return defaults[field] || '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ';
  }

  // –¢–µ–∫—Å—Ç —Å—Ç–∞–¥–∏–∏ –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç—É
  getStageText(progress) {
    if (progress === 0) return '–û–∂–∏–¥–∞–Ω–∏–µ';
    if (progress <= 20) return '–ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ';
    if (progress <= 40) return '–û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã';
    if (progress <= 60) return '–ì–æ—Ç–æ–≤ –∫ –ø–µ—Ä–≤–∏—á–Ω–æ–º—É –ø–æ–¥–±–æ—Ä—É';
    if (progress <= 80) return '–£—Ç–æ—á–Ω–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π';
    return '–ì–æ—Ç–æ–≤ –∫ —Ç–æ—á–Ω–æ–º—É –ø–æ–¥–±–æ—Ä—É';
  }

  // –ú–∏–≥—Ä–∞—Ü–∏—è —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ insights –≤ –Ω–æ–≤—ã–π
  migrateInsights(oldInsights = {}) {
    return {
      // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
      name: oldInsights.name ?? null,
      operation: oldInsights.operation ?? null,
      budget: oldInsights.budget ?? null,

      // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
      type: oldInsights.type ?? null,
      location: oldInsights.location ?? null,
      rooms: oldInsights.rooms ?? null,

      // –î–µ—Ç–∞–ª–∏ –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
      area: oldInsights.area ?? null,
      details: oldInsights.details ?? null,
      preferences: oldInsights.preferences ?? null,

      progress: oldInsights.progress ?? 0
    };
  }

  // –°–±—Ä–æ—Å –ø–æ–Ω–∏–º–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
  reset() {
    for (const key in this.understanding) {
      if (key !== 'progress') this.understanding[key] = null;
    }
    this.understanding.progress = 0;
    this.updateUnderstandingDisplay();

    console.log('üß† –ü–æ–Ω–∏–º–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —Å–±—Ä–æ—à–µ–Ω–æ');
  }

  // –≠–∫—Å–ø–æ—Ä—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  export() {
    return { ...this.understanding };
  }

  // –ò–º–ø–æ—Ä—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
  import(insights) {
    this.understanding = { ...this.understanding, ...insights };
    this.understanding.progress = this.calculateProgress();
    this.updateUnderstandingDisplay();

    console.log('üß† –ü–æ–Ω–∏–º–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ:', insights);
  }
}
